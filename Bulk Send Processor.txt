// supabase/functions/bulk-send-processor/index.ts
// v1.2-hot-fix-B  ⟶  470 permanent failure, no rate-cap, no retry

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";

/*──────── configuration ────────*/
const MAX_MESSAGES_PER_INVOCATION = 50;
const MAX_RETRIES                 = 3;
const RETRY_BACKOFF_SECONDS       = [15, 60, 300];   // 15 s → 5 min

const RATE_LIMIT_ERROR_CODE_WHATSAPP = [429, 471 /* , 80007 */]; // ← 470 REMOVED
const PERMANENT_TEMPLATE_ERROR_CODE  = 470;                     // NEW

const WA_GRAPH_VERSION_BSP = Deno.env.get("WA_GRAPH_VERSION") ?? "v19.0";

/* … helper functions & sendWhatsAppMessage (unchanged from previous patch)
      remember: sendWhatsAppMessage now accepts per-number token + idempotency key …
*/

/*──────── main handler ────────*/
serve(async (req) => {
  /* … unchanged boiler-plate … */

  for (const [bizNumId, batch] of messagesByBusinessNumber.entries()) {
    /* … fetch & compute mpsTarget exactly as before … */

    let rateLimitHit = false;

    for (const msg of batch.slice(0, maxToSendThisCycle)) {
      if (rateLimitHit) break;

      /* mark “processing” exactly as before */

      const result = await sendWhatsAppMessage(
        msg.waba_phone_number_id_to_send_from!,
        msg.recipient_e164_phone,
        msg.template_name!,
        msg.template_language!,
        msg.template_components_json || [],
        msg.template_variables_used,
        msg.image_url,
        (msg as any).bulk_sends.business_whatsapp_numbers.access_token      // per-number token
      );

      if (result.success && result.message_id) {
        /* … success branch unchanged … */
        continue;
      }

      /*──────── FAILURE handling ────────*/
      const code = result.error_code ?? 0;
      const age  = (Date.now() - Date.parse(msg.created_at)) / 1000;

      if (code === PERMANENT_TEMPLATE_ERROR_CODE) {          // NEW  ➜ permanent
        const reason = `Template mismatch (470): ${result.error_message}`;
        await supabase.from("bulk_send_details").upsert({
          bulk_send_id          : msg.bulk_send_id,
          mobile_number_e164    : msg.recipient_e164_phone,
          status                : "failed",
          failure_reason        : reason,
          whatsapp_message_id   : null
        }, { onConflict: "bulk_send_id, mobile_number_e164" });

        await supabase.from("message_queue").delete().eq("id", msg.id);
        console.warn(`[Processor] Permanent 470 failure for ${msg.id}: ${reason}`);
        continue;                                           // NO retry, NO rate-cap
      }

      const isRateLimit = RATE_LIMIT_ERROR_CODE_WHATSAPP.includes(code);
      const canRetry    = !isRateLimit && age < 86_400 && msg.attempt_count < MAX_RETRIES;

      if (canRetry) {
        /* … re-queue exactly as in previous patch … */
      } else {
        const reason = isRateLimit
          ? `Rate-limit (${code}) after ${msg.attempt_count+1} attempts`
          : `Permanent failure after retries: ${result.error_message}`;
        await supabase.from("bulk_send_details").upsert({
          bulk_send_id: msg.bulk_send_id,
          mobile_number_e164: msg.recipient_e164_phone,
          status: "failed",
          failure_reason: reason,
          whatsapp_message_id: null
        }, { onConflict: "bulk_send_id, mobile_number_e164" });
        await supabase.from("message_queue").delete().eq("id", msg.id);
      }

      if (isRateLimit) {
        rateLimitHit = true;
        /* … existing rate-capping logic unchanged … */
      }
    }

    /* … adaptive MPS increase (unchanged) … */
  }

  /* … response / catch block unchanged … */
});