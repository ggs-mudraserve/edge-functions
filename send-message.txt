// supabase/functions/send-message/index.ts
// Edge Function – send-message (v1.6.1)
// • Header image for templates is persisted via p_media_url

import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";
import { log as sharedLog, callWhatsAppApi } from "../_shared/wa.ts";

/* ───── env ───── */
const { SUPABASE_URL, CUSTOM_SERVICE_ROLE_KEY, SUPABASE_ANON_KEY, ALLOWED_MEDIA_HOSTS } =
  Deno.env.toObject();
if (!SUPABASE_URL || !CUSTOM_SERVICE_ROLE_KEY || !SUPABASE_ANON_KEY) {
  throw new Error("Missing env vars");
}
const allowedHosts = (ALLOWED_MEDIA_HOSTS || "")
  .split(",").map(s=>s.trim()).filter(Boolean);

/* ───── request schema ───── */
const Req = z.object({
  conversation_id:  z.string().uuid(),
  type:             z.enum(["text","template","image","document"]),
  text_content:     z.string().min(1).optional(),
  template_name:    z.string().optional(),
  template_language:z.string().optional(),
  template_variables:z.record(z.any()).optional(),
  header_image_url: z.string().url().optional(),
  media_url:        z.string().url().optional(),
}).superRefine((d,ctx)=>{
  if (d.type==="text" && !d.text_content)
      ctx.addIssue({code:z.ZodIssueCode.custom,message:"text_content required"});
  if (d.type==="template" && (!d.template_name || !d.template_language))
      ctx.addIssue({code:z.ZodIssueCode.custom,message:"template_name+language required"});
  if (["image","document"].includes(d.type) && !d.media_url)
      ctx.addIssue({code:z.ZodIssueCode.custom,message:"media_url required"});
  const primary=[d.text_content,d.template_name,d.media_url].filter(Boolean).length;
  if(primary>1) ctx.addIssue({code:z.ZodIssueCode.custom,message:"only one primary content"});
});

/* ───── helpers ───── */
const CORS={
  "Access-Control-Allow-Origin":"*",
  "Access-Control-Allow-Methods":"POST, OPTIONS",
  "Access-Control-Allow-Headers":"Authorization, Content-Type, Apikey",
  "Access-Control-Max-Age":"600"
};
const respond=(code:string,status=200,extra?:Record<string,unknown>)=>
  new Response(JSON.stringify({success:code==="OK",code,...extra}),{
    status,headers:{...CORS,"Content-Type":"application/json"}
  });
const host=(u?:string)=>{try{return new URL(u!).hostname}catch{return""}};
const sb=(key:string,h?:Record<string,string>)=>createClient(
  SUPABASE_URL!,key,{auth:{persistSession:false,autoRefreshToken:false},global:{headers:h}});

/* ───── WA result type ───── */
type WAOk={success:true;message_id:string};
type WAErr={success:false;error_code?:number;error_message?:string;error_details?:unknown};
type WARes=WAOk|WAErr;

/* ───── WA error map ───── */
const mapWa=(c?:number)=>[429,471,80007,131047].includes(c??0)
   ?"WA_RATE_LIMIT":(c===470?"WA_INVALID_TEMPLATE":"WA_API_ERROR");

/* ───── handler ───── */
serve(async req=>{
  if(req.method==="OPTIONS")return new Response(null,{headers:CORS});
  if(req.method!=="POST")    return respond("METHOD_NOT_ALLOWED",405);

  const ctx={fn:"send-message",reqId:crypto.randomUUID(),agentId:""};
  const log=(e:string,x:Record<string,unknown>={},l:"info"|"warn"|"error"="info")=>
      sharedLog(e,{...ctx,...x},{level:l});

  const body=await req.json().catch(()=>null);
  const p=Req.safeParse(body);
  if(!p.success) return respond("BAD_REQUEST",400,{details:p.error.flatten()});
  const d=p.data;

  if(allowedHosts.length && (
      (d.media_url && !allowedHosts.includes(host(d.media_url))) ||
      (d.header_image_url && !allowedHosts.includes(host(d.header_image_url)))
    )) return respond("MEDIA_HOST_NOT_ALLOWED",422);

  const auth=req.headers.get("authorization");
  if(!auth) return respond("AUTH_HEADER_MISSING",401);

  const sbUser = sb(SUPABASE_ANON_KEY!,{Authorization:auth});
  const sbAdm  = sb(CUSTOM_SERVICE_ROLE_KEY!);
  const {data:{user},error:uErr}=await sbUser.auth.getUser();
  if(uErr||!user) return respond("INVALID_TOKEN",401);
  ctx.agentId=user.id;
  if(["service_role","supabase_admin"].includes((user as any).app_metadata?.role))
      return respond("FORBIDDEN_ROLE",403);

  /* rate-limit (warn if rpc missing) */
  const {data:allow,error:rlErr}=await sbAdm.rpc("rate_limit_outbound",{p_agent_id:user.id});
  if(rlErr) log("rate_limit_rpc_missing");
  else if(allow!==true) return respond("RATE_LIMIT_HIT",429);

  /* permissions */
  const {data:canSend}=await sbUser.rpc("can_agent_insert_into_conversation",
        {agent_id:user.id,target_conversation_id:d.conversation_id});
  if(canSend!==true) return respond("FORBIDDEN_CONVO",403);

  const {data:convo,error:cErr}=await sbAdm
       .from("conversations")
       .select("status,contact_e164_phone,business_whatsapp_numbers(waba_phone_number_id,access_token)")
       .eq("id",d.conversation_id).single();
  if(cErr||!convo) return respond("CONVO_NOT_FOUND",404);
  if(convo.status==="closed") return respond("CONVO_CLOSED",409);

  const biz=convo.business_whatsapp_numbers as any;
  if(!biz?.waba_phone_number_id||!biz?.access_token)
      return respond("WABA_CONFIG_MISSING",500);

  /* build WA payload */
  let payload:Record<string,unknown>;
  if(d.type==="text"){
    payload={type:"text",text:{body:d.text_content!}};
  }else if(d.type==="template"){
    const {data:tpl}=await sbAdm
       .from("message_templates_cache")
       .select("components_json")
       .eq("name",d.template_name!)
       .eq("language",d.template_language!)
       .eq("status_from_whatsapp","APPROVED").single();
    if(!tpl) return respond("TEMPLATE_NOT_FOUND",422);
    const comps=buildTemplateComponents(
       Array.isArray(tpl.components_json)?tpl.components_json:tpl.components_json?.components,
       d.template_variables,d.header_image_url);
    payload={type:"template",
      template:{name:d.template_name,language:{code:d.template_language},components:comps||undefined}};
  }else{
    payload=d.type==="image"
      ?{type:"image",image:{link:d.media_url!}}
      :{type:"document",document:{link:d.media_url!}};
  }

  /* send to WA */
  const wa:WARes=await callWhatsAppApi(
       {wabaPhoneId:biz.waba_phone_number_id,token:biz.access_token,idempotencyKey:crypto.randomUUID()},
       convo.contact_e164_phone,payload) as WARes;
  if(!wa.success||!wa.message_id)
      return respond(mapWa((wa as WAErr).error_code),502,{details:(wa as WAErr).error_message});

  /* persist */
  const {error:dbErr,data:uuid}=await sbAdm.rpc("insert_message",{
    p_conversation_id:    d.conversation_id,
    p_content_type:       d.type,
    p_sender_type:        "agent",
    p_text_content:       d.type==="text"     ? d.text_content : null,
    p_template_name:      d.type==="template" ? d.template_name : null,
    p_template_variables: d.type==="template" ? d.template_variables : null,
    p_media_url:          d.type==="template"
                            ? d.header_image_url ?? null       // ← header image stored here
                            : (["image","document"].includes(d.type) ? d.media_url : null),
    p_whatsapp_message_id:wa.message_id,
    p_sender_id_override: null
  });
  if(dbErr) log("db_insert_fail",{err:dbErr.message,waId:wa.message_id},"error");

  return respond("OK",200,{
    whatsapp_message_id:wa.message_id,
    database_message_uuid:uuid as string|undefined,
    warning:dbErr?"db_log_failed":undefined
  });
});

/* ───── template helper (unchanged) ───── */
function buildTemplateComponents( comps:any[]|undefined, vars?:Record<string,any>, header?:string){
  // (same implementation you already have)
  return [];
}